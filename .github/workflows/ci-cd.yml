name: ci-cd

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      default_env:
        description: "Default environment at root (/): production|staging|test"
        required: false
        default: staging

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  integrate-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build production
        run: |
          # Ensure a clean TypeScript build (avoid stale build info)
          npx tsc --build --clean || true
          rm -rf node_modules/.tmp dist || true
          REPO_NAME="${{ github.event.repository.name }}"
          export VITE_BASE_PATH="/${REPO_NAME}/"
          export VITE_ENV_NAME="Production"
          npm run build -- --outDir dist/prod

      - name: Build staging
        run: |
          REPO_NAME="${{ github.event.repository.name }}"
          export VITE_BASE_PATH="/${REPO_NAME}/staging/"
          export VITE_ENV_NAME="Staging"
          npm run build -- --outDir dist/staging

      # Keep testing step in pipeline, but do not publish a /test site
      - name: Build test
        run: |
          echo "Skipping building public test site; tests already ran in unit stage."

      - name: Compose Pages artifact
        if: ${{ github.event_name == 'push' }}
        run: |
          mkdir -p pages
          rsync -a dist/prod/ pages/
          mkdir -p pages/staging pages/production
          rsync -a dist/staging/ pages/staging/
          # Also expose production explicitly under /production
          rsync -a dist/prod/ pages/production/
          REPO_NAME="${{ github.event.repository.name }}"
          # Insert <base> tag into each index.html so relative navigation works reliably on Pages
          PROD_BASE="/${REPO_NAME}/"
          STAGING_BASE="/${REPO_NAME}/staging/"
          for target in pages pages/staging; do
            if [[ -f "$target/index.html" ]]; then
              BASE_VAR="$PROD_BASE"; [[ "$target" == "pages/staging" ]] && BASE_VAR="$STAGING_BASE";
              # Insert <base> right after the opening <head>
              tmpfile=$(mktemp)
              awk -v base="$BASE_VAR" '{print} NR==1{next} /<head>/ && !done {print "    <base href=\"" base "\">"; done=1}1' "$target/index.html" > "$tmpfile" && mv "$tmpfile" "$target/index.html"
            fi
          done
          # Keep production at root and also under /production
          # Root already contains production (rsync from dist/prod at top). Ensure /production also serves production (done above).
          # Ensure GitHub Pages doesn't run Jekyll and SPA fallback works
          touch pages/.nojekyll
          cp pages/index.html pages/404.html || true
          if [[ -f pages/staging/index.html ]]; then cp pages/staging/index.html pages/staging/404.html; fi
          if [[ -f pages/production/index.html ]]; then cp pages/production/index.html pages/production/404.html; fi

      - name: Upload artifact
        if: ${{ github.event_name == 'push' }}
        uses: actions/upload-pages-artifact@v3
        with:
          path: pages

  run-testing:
    needs: integrate-and-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Typecheck
        run: npm run typecheck

      - name: Unit tests
        run: npm run test:run

  promote-to-staging:
    if: ${{ github.event_name == 'push' }}
    needs: run-testing
    runs-on: ubuntu-latest
    environment:
      name: staging
    steps:
      - name: Gate - Staging
        run: echo "Staging gate passed"

  await-production-approval:
    if: ${{ github.event_name == 'push' }}
    needs: promote-to-staging
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      - name: Await manual approval in environment
        run: echo "If 'production' environment has required reviewers, this job will pause until approved."

  deploy:
    if: ${{ github.event_name == 'push' }}
    needs: await-production-approval
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4


